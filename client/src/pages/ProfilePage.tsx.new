import { useEffect, useState } from "react";
import Layout from "@/components/layout/Layout";
import { useQuery } from "@tanstack/react-query";
import { getQueryFn } from "@/lib/queryClient";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useToast } from "@/hooks/use-toast";
import { useUser } from "@/context/UserContext";
import EditModal from "@/components/profile/EditModal";
import { 
  UserIcon, 
  Calendar, 
  BarChart, 
  Clock,
  Mail,
  Phone,
  Lock,
  Image,
  Pencil,
  Trophy,
  Users
} from "lucide-react";

interface LinkedUser {
  id: number;
  username: string;
  name?: string;
  avatarUrl?: string;
  relationshipType: string; // 'friend', 'family', 'teammate', etc.
  lastGameDate?: string;
}

interface UserStats {
  gamesPlayed: number;
  lastPlayed: string;
}

interface UserProfile {
  id: number;
  username: string;
  name?: string;
  email?: string;
  phone?: string;
  avatarUrl?: string;
}

export default function ProfilePage() {
  const { toast } = useToast();
  const { user: currentUser, updateUser: setUser } = useUser();
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [editType, setEditType] = useState<'name' | 'email' | 'phone' | 'password' | 'avatar'>('name');
  const [phonePrefix, setPhonePrefix] = useState<string>('+966');

  // تحديد رمز الدولة عند تحميل الصفحة
  useEffect(() => {
    fetch('https://ipapi.co/json/')
      .then(response => response.json())
      .then(data => {
        const countryCode = data.country_calling_code;
        // التحقق من صحة رمز الدولة باستخدام regex
        if (countryCode && /^\+\d+$/.test(countryCode)) {
          setPhonePrefix(countryCode);
        } else {
          setPhonePrefix('+966'); // استخدام +966 (السعودية) كقيمة افتراضية
        }
        console.log("Country calling code:", countryCode);
      })
      .catch(err => {
        console.error("فشل جلب معلومات الدولة:", err);
        setPhonePrefix('+966'); // استخدام +966 (السعودية) كقيمة افتراضية في حالة الخطأ
      });
  }, []);

  // استعلام للمستخدمين المرتبطين
  const { 
    data: linkedUsers, 
    isLoading: linkedUsersLoading
  } = useQuery<LinkedUser[], Error>({
    queryKey: ['/api/linked-users'],
    queryFn: getQueryFn({ on401: "throw" }),
    placeholderData: [], // استخدم مصفوفة فارغة كقيمة افتراضية في حال عدم وجود بيانات
  });

  // جلب إحصائيات المستخدم
  const { 
    data: userStats, 
    isLoading: statsLoading
  } = useQuery<UserStats, Error>({
    queryKey: ['/api/user-stats'],
    queryFn: getQueryFn({ on401: "throw" }),
  });

  // جلب معلومات المستخدم
  const { 
    data: userProfile, 
    isLoading: profileLoading,
    refetch: refetchProfile
  } = useQuery<UserProfile, Error>({
    queryKey: ['/api/user-profile'],
    queryFn: getQueryFn({ on401: "throw" }),
  });

  // تحديث حالة المستخدم عند جلب البيانات
  useEffect(() => {
    if (userProfile) {
      setUser(userProfile);
    }
  }, [userProfile, setUser]);

  // دالة فتح نافذة التعديل
  const openEditModal = (type: 'name' | 'email' | 'phone' | 'password' | 'avatar') => {
    setEditType(type);
    setEditModalOpen(true);
  };

  // دالة معالجة حفظ التغييرات
  const handleSaveProfileChanges = (type: string, value: string) => {
    if (!currentUser) return;
    
    // تحديث بيانات المستخدم
    const updatedUser = { ...currentUser };
    
    switch(type) {
      case 'name':
        updatedUser.name = value;
        break;
      case 'email':
        updatedUser.email = value;
        break;
      case 'phone':
        updatedUser.phone = value;
        break;
      case 'password':
        // لن نقوم بتخزين كلمة المرور في حالة المستخدم الحالية
        toast({
          title: "تم تغيير كلمة المرور",
          description: "تم تحديث كلمة المرور الخاصة بك بنجاح",
        });
        break;
      case 'avatar':
        updatedUser.avatarUrl = value;
        break;
    }
    
    // تحديث البيانات في الواجهة وفي الخادم
    setUser(updatedUser);
    setEditModalOpen(false);
    
    // إظهار رسالة نجاح
    if (type !== 'password') {
      toast({
        title: "تم الحفظ بنجاح",
        description: "تم تحديث معلومات ملفك الشخصي",
      });
    }
    
    // إعادة تحميل بيانات الملف الشخصي
    refetchProfile();
  };

  // التحقق من وجود المستخدم الحالي
  if (!currentUser) {
    return <div>يرجى تسجيل الدخول لعرض ملفك الشخصي</div>;
  }

  // عرض حالة التحميل
  if (profileLoading) {
    return (
      <Layout>
        <div className="container mx-auto py-8 px-4 md:px-6" dir="rtl">
          <div className="grid gap-6 md:gap-8 md:grid-cols-3">
            <div className="md:col-span-1">
              <Skeleton className="h-[300px] w-full rounded-xl" />
            </div>
            <div className="md:col-span-2">
              <div className="grid gap-6">
                <Card>
                  <CardHeader>
                    <Skeleton className="h-6 w-32" />
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4">
                      <Skeleton className="h-20 w-full" />
                      <Skeleton className="h-20 w-full" />
                      <Skeleton className="h-20 w-full" />
                      <Skeleton className="h-20 w-full" />
                    </div>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <Skeleton className="h-6 w-32" />
                  </CardHeader>
                  <CardContent>
                    <Skeleton className="h-40 w-full" />
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>
      </Layout>
    );
  }

  const user = currentUser;

  return (
    <Layout>
      <div className="container mx-auto py-8 px-4 md:px-8" dir="rtl">
        <div className="grid gap-6 md:gap-8 md:grid-cols-3">
          {/* بطاقة الملف الشخصي */}
          <div className="md:col-span-1">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-xl font-bold">الملف الشخصي</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-col items-center">
                  <div className="relative group">
                    <Avatar className="h-24 w-24 border-2 border-primary">
                      <AvatarImage src={user.avatarUrl} alt={user.name} />
                      <AvatarFallback>{user.name?.charAt(0) || user.username?.charAt(0) || <UserIcon />}</AvatarFallback>
                    </Avatar>
                    <button 
                      className="absolute bottom-0 right-0 bg-primary text-white p-1 rounded-full hover:bg-primary/80 transition-colors"
                      onClick={() => openEditModal('avatar')}
                    >
                      <Pencil className="h-4 w-4" />
                    </button>
                  </div>
                  
                  <h3 className="text-xl font-bold mt-4 mb-1 flex items-center gap-1">
                    {user.name || user.username}
                    <button 
                      className="text-muted-foreground hover:text-primary"
                      onClick={() => openEditModal('name')}
                    >
                      <Pencil className="h-3.5 w-3.5" />
                    </button>
                  </h3>
                  
                  <div className="text-sm text-muted-foreground mb-4 flex flex-col items-center">
                    <div className="flex items-center gap-1 mt-1">
                      <Mail className="h-3.5 w-3.5" />
                      <span>{user.email}</span>
                      <button 
                        className="text-muted-foreground hover:text-primary"
                        onClick={() => openEditModal('email')}
                      >
                        <Pencil className="h-3 w-3" />
                      </button>
                    </div>
                    
                    <div className="flex items-center gap-1 mt-1">
                      <Phone className="h-3.5 w-3.5" />
                      <span>{user.phone}</span>
                      <button 
                        className="text-muted-foreground hover:text-primary"
                        onClick={() => openEditModal('phone')}
                      >
                        <Pencil className="h-3 w-3" />
                      </button>
                    </div>
                  </div>
                  
                  <div className="w-full mt-2">
                    <Button 
                      variant="outline" 
                      className="w-full flex items-center justify-center gap-2"
                      onClick={() => openEditModal('password')}
                    >
                      <Lock className="h-4 w-4" />
                      <span>تغيير كلمة المرور</span>
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* معلومات اللاعب */}
          <div className="md:col-span-2">
            <div className="grid gap-6">
              {/* بطاقة المستخدمين المرتبطين */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl font-bold">المستخدمون المرتبطون</CardTitle>
                </CardHeader>
                <CardContent>
                  {linkedUsersLoading ? (
                    <div className="space-y-3">
                      <Skeleton className="h-16 w-full" />
                      <Skeleton className="h-16 w-full" />
                      <Skeleton className="h-16 w-full" />
                    </div>
                  ) : linkedUsers && linkedUsers.length > 0 ? (
                    <div className="space-y-4">
                      {linkedUsers.map((linkedUser) => (
                        <div key={linkedUser.id} className="flex items-center justify-between bg-muted/30 p-3 rounded-lg">
                          <div className="flex items-center gap-3">
                            <Avatar className="h-10 w-10 border border-muted">
                              <AvatarImage src={linkedUser.avatarUrl} alt={linkedUser.name} />
                              <AvatarFallback>
                                {linkedUser.name?.charAt(0) || linkedUser.username?.charAt(0) || <UserIcon />}
                              </AvatarFallback>
                            </Avatar>
                            <div>
                              <h4 className="font-medium">{linkedUser.name || linkedUser.username}</h4>
                              <div className="flex items-center gap-2 text-xs text-muted-foreground">
                                <Badge variant="outline" className="bg-primary/5 px-2">
                                  {linkedUser.relationshipType === 'friend' ? 'صديق' : 
                                   linkedUser.relationshipType === 'family' ? 'عائلة' : 
                                   linkedUser.relationshipType === 'teammate' ? 'زميل' : 'مرتبط'}
                                </Badge>
                                {linkedUser.lastGameDate && (
                                  <span className="flex items-center gap-1">
                                    <Calendar className="h-3 w-3" />
                                    {new Date(linkedUser.lastGameDate).toLocaleDateString('en-US', {
                                      year: 'numeric',
                                      month: '2-digit',
                                      day: '2-digit'
                                    })}
                                  </span>
                                )}
                              </div>
                            </div>
                          </div>
                          <Button size="sm" variant="ghost" className="h-8 w-8 p-0">
                            <Trophy className="h-4 w-4 text-yellow-500" />
                          </Button>
                        </div>
                      ))}
                      
                      <Button variant="outline" className="w-full mt-2">
                        <Users className="h-4 w-4 mr-2" />
                        إضافة مستخدم جديد
                      </Button>
                    </div>
                  ) : (
                    <div className="text-center py-6 space-y-3">
                      <p className="text-muted-foreground">لا يوجد مستخدمين مرتبطين حالياً</p>
                      <Button variant="outline">
                        <Users className="h-4 w-4 mr-2" />
                        إضافة أصدقاء
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
              
              {/* إحصائيات اللعب */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl font-bold">إحصائيات اللعب</CardTitle>
                </CardHeader>
                <CardContent>
                  {statsLoading ? (
                    <Skeleton className="h-40 w-full" />
                  ) : userStats ? (
                    <div className="grid grid-cols-2 gap-4">
                      <Card>
                        <CardContent className="p-4 flex items-center gap-3">
                          <div className="p-2 rounded-full bg-purple-100">
                            <BarChart className="h-5 w-5 text-purple-500" />
                          </div>
                          <div>
                            <p className="text-sm text-muted-foreground">الألعاب الكلية</p>
                            <p className="font-bold">{userStats.gamesPlayed} لعبة</p>
                          </div>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardContent className="p-4 flex items-center gap-3">
                          <div className="p-2 rounded-full bg-orange-100">
                            <Clock className="h-5 w-5 text-orange-500" />
                          </div>
                          <div>
                            <p className="text-sm text-muted-foreground">آخر لعبة</p>
                            <p className="font-bold" dir="ltr">
                              {new Date(userStats.lastPlayed).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: '2-digit',
                                day: '2-digit'
                              })}
                            </p>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  ) : (
                    <p>لا توجد إحصائيات متاحة</p>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
      
      {/* نافذة تعديل معلومات الملف الشخصي */}
      <EditModal
        open={editModalOpen}
        onOpenChange={setEditModalOpen}
        editType={editType}
        user={user}
        onSave={handleSaveProfileChanges}
        phonePrefix={phonePrefix}
      />
    </Layout>
  );
}