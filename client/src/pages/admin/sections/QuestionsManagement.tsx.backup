import React, { useState, useEffect, ChangeEvent } from "react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import * as XLSX from 'xlsx';


import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Loader2, Plus, Pencil, Trash2, ChevronUp, ChevronDown, ChevronLeft, ChevronRight, Download, Upload, Link as LinkIcon, ExternalLink, FileSpreadsheet, FileText, CheckCircle, XCircle, X, Edit, FolderEdit, BarChart2 } from "lucide-react";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";

// استيراد لتوليد مثال للاستيراد
import { saveAs } from "file-saver";

// دالة مساعدة للبحث عن فئة باستخدام طرق مطابقة مختلفة
// دالة مساعدة للبحث عن فئة باستخدام طرق مطابقة مختلفة
const findCategoryByName = (name: string, categoriesList: any[]) => {
  if (!name || !categoriesList || categoriesList.length === 0) return null;
  
  // 1. البحث بالتطابق المباشر
  let category = categoriesList.find(c => c.name.trim() === name.trim());
  
  // 2. البحث مع تجاهل أل التعريف
  if (!category) {
    if (name.startsWith('ال')) {
      category = categoriesList.find(c => c.name.trim() === name.substring(2).trim());
    } else {
      category = categoriesList.find(c => c.name.trim() === ('ال' + name).trim());
    }
  }
  
  // 3. البحث مع تجاهل الفراغات والتشكيل
  if (!category) {
    const cleanName = name.replace(/\s+/g, '').replace(/[ًٌٍَُِّْ]/g, '');
    category = categoriesList.find(c => {
      const cleanCatName = c.name.replace(/\s+/g, '').replace(/[ًٌٍَُِّْ]/g, '');
      return cleanCatName === cleanName;
    });
  }
  
  return category || null;
};

// نموذج السؤال
const questionSchema = z.object({
  id: z.number().optional(),
  text: z.string().min(5, "نص السؤال مطلوب ويجب أن يكون على الأقل 5 أحرف"),
  answer: z.string().min(1, "الإجابة مطلوبة"),
  categoryId: z.number().min(1, "يرجى اختيار فئة"),
  subcategoryId: z.number(),
  difficulty: z.number().min(1).max(3),
  imageUrl: z.string().optional().nullable(),
  videoUrl: z.string().optional().nullable(),
  mediaType: z.enum(["image", "video", "none"]).default("none"),
  keywords: z.string().optional(),
  isActive: z.boolean().default(true),
});

type Question = z.infer<typeof questionSchema>;

interface Category {
  id: number;
  name: string;
  icon: string;
  children: {
    id: number;
    name: string;
    icon: string;
    availableQuestions: number;
  }[];
}

interface QuestionDisplay extends Question {
  categoryName: string;
  subcategoryName: string;
  categoryIcon: string;
  usageCount: number;
  createdAt: string;
}

export default function QuestionsManagement() {
  const { toast } = useToast();
  const [dialogOpen, setDialogOpen] = useState(false);
  const [questions, setQuestions] = useState<QuestionDisplay[]>([]);
  const [filteredQuestions, setFilteredQuestions] = useState<QuestionDisplay[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [isEditMode, setIsEditMode] = useState(false);
  const [saving, setSaving] = useState(false);
  const [importing, setImporting] = useState(false);
  
  // تحديد الأسئلة للعمليات الجماعية
  const [selectedQuestions, setSelectedQuestions] = useState<number[]>([]);
  const [selectAll, setSelectAll] = useState(false);
  const [bulkActionOpen, setBulkActionOpen] = useState(false);
  const [bulkProcessing, setBulkProcessing] = useState(false);
  const [bulkCategoryOpen, setBulkCategoryOpen] = useState(false);
  const [bulkDifficultyOpen, setBulkDifficultyOpen] = useState(false);
  
  // خيارات عرض الجدول
  const [pageSize, setPageSize] = useState<number>(10);
  const [currentPage, setCurrentPage] = useState<number>(1);
  
  // متغيرات التعديل السريع
  const [quickEditId, setQuickEditId] = useState<number | null>(null);
  const [quickEditField, setQuickEditField] = useState<string | null>(null);
  const [quickEditValue, setQuickEditValue] = useState<string | number | null>(null);
  const [showQuickEditModal, setShowQuickEditModal] = useState(false);
  const [showQuickCategoryModal, setShowQuickCategoryModal] = useState(false);
  const [showQuickDifficultyModal, setShowQuickDifficultyModal] = useState(false);
  
  // نموذج تعديل الفئات السريع
  const setEditForm = useForm({
    defaultValues: {
      categoryId: 0,
      subcategoryId: undefined as number | undefined,
    }
  });
  
  // فلاتر البحث
  const [filterText, setFilterText] = useState("");
  const [filterCategoryId, setFilterCategoryId] = useState<number | null>(null);
  const [filterSubcategoryId, setFilterSubcategoryId] = useState<number | null>(null);
  const [filterUsageMin, setFilterUsageMin] = useState<number | null>(null);
  const [filterUsageMax, setFilterUsageMax] = useState<number | null>(null);
  const [filterDateFrom, setFilterDateFrom] = useState<string | null>(null);
  const [filterDateTo, setFilterDateTo] = useState<string | null>(null);
  const [filterActive, setFilterActive] = useState<string>("all"); // all, active, inactive
  const [showFilters, setShowFilters] = useState(false);

  // تهيئة نموذج السؤال
  const form = useForm<Question>({
    resolver: zodResolver(questionSchema),
    defaultValues: {
      text: "",
      answer: "",
      categoryId: 0,
      subcategoryId: 0,
      difficulty: 1,
      imageUrl: "",
      videoUrl: "",
      mediaType: "none",
      keywords: "",
      isActive: true,
    },
  });

  // جلب الأسئلة من API
  const fetchQuestions = async () => {
    try {
      setLoading(true);
      const response = await apiRequest("GET", "/api/questions");
      if (response.ok) {
        const data = await response.json();
        setQuestions(data || []);
        setFilteredQuestions(data || []);
      }
    } catch (err) {
      console.error("Error fetching questions:", err);
      toast({
        title: "خطأ في جلب الأسئلة",
        description: "حدث خطأ أثناء محاولة جلب الأسئلة. يرجى المحاولة مرة أخرى.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // جلب الفئات من API
  const fetchCategories = async () => {
    try {
      console.log("جاري جلب الفئات...");
      const response = await apiRequest("GET", "/api/categories-with-children");
      console.log("استجابة الخادم:", response.status);
      
      // تسجيل محتوى الرد للتشخيص
      const responseText = await response.text();
      console.log("محتوى الرد:", responseText);
      
      // تحويل النص إلى JSON (اختياري إذا كان النص صالح JSON)
      let data = [];
      try {
        if (responseText) {
          data = JSON.parse(responseText);
        }
      } catch (e) {
        console.error("خطأ في تحليل JSON:", e);
        data = [];
      }
      
      console.log("بيانات الفئات:", data);
      setCategories(data || []);
    } catch (err) {
      console.error("خطأ في جلب الفئات:", err);
      setCategories([]); // تعيين مصفوفة فارغة في حالة الخطأ
    }
  };

  // تحميل البيانات عند بدء التطبيق
  useEffect(() => {
    fetchCategories().then(() => fetchQuestions());
  }, []);
  
  // تطبيق الفلاتر على الأسئلة
  useEffect(() => {
    if (!questions.length) {
      setFilteredQuestions([]);
      return;
    }
    
    let result = [...questions];
    
    // فلتر النص
    if (filterText) {
      const searchText = filterText.toLowerCase();
      result = result.filter(q => 
        q.text.toLowerCase().includes(searchText) || 
        q.answer.toLowerCase().includes(searchText) ||
        (q.keywords && q.keywords.toLowerCase().includes(searchText))
      );
    }
    
    // فلتر الفئة الرئيسية
    if (filterCategoryId) {
      result = result.filter(q => q.categoryId === filterCategoryId);
    }
    
    // فلتر الفئة الفرعية
    if (filterSubcategoryId) {
      result = result.filter(q => q.subcategoryId === filterSubcategoryId);
    }
    
    // فلتر عدد مرات الاستخدام (الحد الأدنى)
    if (filterUsageMin !== null) {
      result = result.filter(q => q.usageCount >= filterUsageMin);
    }
    
    // فلتر عدد مرات الاستخدام (الحد الأقصى)
    if (filterUsageMax !== null) {
      result = result.filter(q => q.usageCount <= filterUsageMax);
    }
    
    // فلتر التاريخ (من)
    if (filterDateFrom) {
      const fromDate = new Date(filterDateFrom);
      result = result.filter(q => new Date(q.createdAt) >= fromDate);
    }
    
    // فلتر التاريخ (إلى)
    if (filterDateTo) {
      const toDate = new Date(filterDateTo);
      toDate.setHours(23, 59, 59, 999); // نهاية اليوم
      result = result.filter(q => new Date(q.createdAt) <= toDate);
    }
    
    // فلتر الحالة (فعال/غير فعال)
    if (filterActive !== 'all') {
      const isActive = filterActive === 'active';
      result = result.filter(q => q.isActive === isActive);
    }
    
    setFilteredQuestions(result);
    setCurrentPage(1); // إعادة تعيين الصفحة الحالية عند تغيير الفلاتر
    setSelectedQuestions([]); // إعادة تعيين الأسئلة المحددة عند تغيير الفلاتر
    setSelectAll(false); // إعادة تعيين حالة تحديد الكل
  }, [questions, filterText, filterCategoryId, filterSubcategoryId, filterUsageMin, filterUsageMax, filterDateFrom, filterDateTo, filterActive]);
  
  // معالجة تحديد/إلغاء تحديد سؤال
  const handleSelectQuestion = (questionId: number) => {
    setSelectedQuestions(prev => {
      if (prev.includes(questionId)) {
        // إلغاء تحديد السؤال
        const newSelected = prev.filter(id => id !== questionId);
        setSelectAll(false); // إعادة تعيين حالة تحديد الكل
        return newSelected;
      } else {
        // تحديد السؤال
        return [...prev, questionId];
      }
    });
  };
  
  // معالجة تحديد/إلغاء تحديد كل الأسئلة
  const handleSelectAll = () => {
    const newSelectAll = !selectAll;
    setSelectAll(newSelectAll);
    
    if (newSelectAll) {
      // تحديد كل الأسئلة المعروضة في الصفحة الحالية
      const currentPageIds = filteredQuestions
        .slice((currentPage - 1) * pageSize, currentPage * pageSize)
        .map(q => q.id as number);
      setSelectedQuestions(currentPageIds);
    } else {
      // إلغاء تحديد كل الأسئلة
      setSelectedQuestions([]);
    }
  };
  
  // معالجة عملية حذف الأسئلة المحددة
  const handleBulkDelete = async () => {
    if (!selectedQuestions.length) return;
    
    if (!confirm(`هل أنت متأكد أنك تريد حذف ${selectedQuestions.length} سؤال محدد؟`)) {
      return;
    }
    
    try {
      setBulkProcessing(true);
      
      // حذف الأسئلة المحددة واحدة تلو الأخرى
      for (const questionId of selectedQuestions) {
        await apiRequest("DELETE", `/api/questions/${questionId}`);
      }
      
      // تحديث قائمة الأسئلة بعد الحذف
      await fetchQuestions();
      
      toast({
        title: "تم بنجاح",
        description: `تم حذف ${selectedQuestions.length} سؤال بنجاح.`,
      });
      
      // إعادة تعيين حالة التحديد
      setSelectedQuestions([]);
      setSelectAll(false);
      setBulkActionOpen(false);
    } catch (error) {
      console.error("خطأ أثناء الحذف الجماعي:", error);
      toast({
        title: "خطأ في الحذف",
        description: "حدث خطأ أثناء محاولة حذف الأسئلة المحددة.",
        variant: "destructive",
      });
    } finally {
      setBulkProcessing(false);
    }
  };
  
  // معالجة تغيير حالة التفعيل للأسئلة المحددة
  const handleBulkToggleActive = async (activate: boolean) => {
    if (!selectedQuestions.length) return;
    
    try {
      setBulkProcessing(true);
      
      // تغيير حالة التفعيل للأسئلة المحددة واحدة تلو الأخرى
      for (const questionId of selectedQuestions) {
        const question = questions.find(q => q.id === questionId);
        if (question) {
          const updatedQuestion = { ...question, isActive: activate };
          await apiRequest("PUT", `/api/questions/${questionId}`, updatedQuestion);
        }
      }
      
      // تحديث قائمة الأسئلة بعد التعديل
      await fetchQuestions();
      
      toast({
        title: "تم بنجاح",
        description: `تم ${activate ? 'تفعيل' : 'إلغاء تفعيل'} ${selectedQuestions.length} سؤال بنجاح.`,
      });
      
      // إعادة تعيين حالة التحديد
      setSelectedQuestions([]);
      setSelectAll(false);
      setBulkActionOpen(false);
    } catch (error) {
      console.error(`خطأ أثناء ${activate ? 'تفعيل' : 'إلغاء تفعيل'} الأسئلة المحددة:`, error);
      toast({
        title: `خطأ في ${activate ? 'التفعيل' : 'إلغاء التفعيل'}`,
        description: `حدث خطأ أثناء محاولة ${activate ? 'تفعيل' : 'إلغاء تفعيل'} الأسئلة المحددة.`,
        variant: "destructive",
      });
    } finally {
      setBulkProcessing(false);
    }
  };
  
  // نقل الأسئلة المحددة إلى فئة أخرى
  const handleBulkMoveToCategory = async (categoryId: number, subcategoryId: number | null) => {
    if (!selectedQuestions.length) return;
    
    try {
      setBulkProcessing(true);
      
      // نقل الأسئلة المحددة واحدة تلو الأخرى
      for (const questionId of selectedQuestions) {
        const question = questions.find(q => q.id === questionId);
        if (question) {
          const updatedQuestion = { 
            ...question, 
            categoryId, 
            subcategoryId 
          };
          await apiRequest("PUT", `/api/questions/${questionId}`, updatedQuestion);
        }
      }
      
      // تحديث قائمة الأسئلة
      await fetchQuestions();
      
      const categoryName = categories.find(c => c.id === categoryId)?.name || "";
      const subcategoryName = subcategoryId ? 
        categories.find(c => c.id === categoryId)?.children.find(s => s.id === subcategoryId)?.name || "" : "";
      
      toast({
        title: "تم نقل الأسئلة",
        description: `تم نقل ${selectedQuestions.length} سؤال إلى فئة "${categoryName}${subcategoryName ? ` - ${subcategoryName}` : ''}" بنجاح.`,
      });
      
      // إعادة تعيين حالة التحديد
      setSelectedQuestions([]);
      setSelectAll(false);
      setBulkCategoryOpen(false);
    } catch (error) {
      console.error("خطأ أثناء نقل الأسئلة المحددة:", error);
      toast({
        title: "خطأ في نقل الأسئلة",
        description: "حدث خطأ أثناء محاولة نقل الأسئلة المحددة.",
        variant: "destructive",
      });
    } finally {
      setBulkProcessing(false);
    }
  };
  
  // تغيير مستوى صعوبة الأسئلة المحددة
  const handleBulkChangeDifficulty = async (difficulty: number) => {
    if (!selectedQuestions.length) return;
    
    try {
      setBulkProcessing(true);
      
      // تغيير مستوى الصعوبة للأسئلة المحددة واحدة تلو الأخرى
      for (const questionId of selectedQuestions) {
        const question = questions.find(q => q.id === questionId);
        if (question) {
          const updatedQuestion = { ...question, difficulty };
          await apiRequest("PUT", `/api/questions/${questionId}`, updatedQuestion);
        }
      }
      
      // تحديث قائمة الأسئلة
      await fetchQuestions();
      
      const difficultyText = difficulty === 1 ? "سهل" : difficulty === 2 ? "متوسط" : "صعب";
      
      toast({
        title: "تم تغيير مستوى الصعوبة",
        description: `تم تغيير مستوى صعوبة ${selectedQuestions.length} سؤال إلى "${difficultyText}" بنجاح.`,
      });
      
      // إعادة تعيين حالة التحديد
      setSelectedQuestions([]);
      setSelectAll(false);
      setBulkDifficultyOpen(false);
    } catch (error) {
      console.error("خطأ أثناء تغيير مستوى الصعوبة للأسئلة المحددة:", error);
      toast({
        title: "خطأ في تغيير مستوى الصعوبة",
        description: "حدث خطأ أثناء محاولة تغيير مستوى الصعوبة للأسئلة المحددة.",
        variant: "destructive",
      });
    } finally {
      setBulkProcessing(false);
    }
  };
      
      const difficultyText = difficulty === 1 ? "سهل" : difficulty === 2 ? "متوسط" : "صعب";
      
      toast({
        title: "تم تغيير مستوى الصعوبة",
        description: `تم تغيير مستوى صعوبة ${selectedQuestions.length} سؤال إلى "${difficultyText}" بنجاح.`,
      });
      
      // إعادة تعيين حالة التحديد
      setSelectedQuestions([]);
      setSelectAll(false);
      setBulkDifficultyOpen(false);
    } catch (error) {
      console.error("خطأ أثناء تغيير مستوى صعوبة الأسئلة المحددة:", error);
      toast({
        title: "خطأ في تغيير مستوى الصعوبة",
        description: "حدث خطأ أثناء محاولة تغيير مستوى صعوبة الأسئلة المحددة.",
        variant: "destructive",
      });
    } finally {
      setBulkProcessing(false);
    }
  };

  // عرض نموذج إضافة سؤال جديد
  const showAddQuestionForm = () => {
    form.reset({
      text: "",
      answer: "",
      categoryId: 0,
      subcategoryId: 0,
      difficulty: 1,
      imageUrl: "",
      videoUrl: "",
      mediaType: "none",
      keywords: "",
      isActive: true,
    });
    setIsEditMode(false);
    setDialogOpen(true);
  };

  // البحث عن اسم الفئة بواسطة معرفها
  const findCategoryName = (categoryId: number): string => {
    const category = categories.find((c) => c.id === categoryId);
    return category ? category.name : "غير معروف";
  };

  // البحث عن أيقونة الفئة بواسطة معرفها
  const findCategoryIcon = (categoryId: number): string => {
    const category = categories.find((c) => c.id === categoryId);
    return category ? category.icon : "❓";
  };

  // معالجة تغيير الفئة
  const handleCategoryChange = (categoryId: string) => {
    console.log("تم اختيار الفئة:", categoryId);
    const catId = categoryId === "none" ? 0 : parseInt(categoryId);
    form.setValue("categoryId", catId);
    form.setValue("subcategoryId", 0);
    
    if (catId > 0) {
      const selectedCategory = categories.find(c => c.id === catId);
      console.log("الفئة المحددة:", selectedCategory);
      if (selectedCategory && selectedCategory.children) {
        console.log("الفئات الفرعية المتاحة:", selectedCategory.children);
      }
    }
  };

  // عرض نموذج تعديل سؤال
  const showEditQuestionForm = (question: QuestionDisplay) => {
    form.reset({
      id: question.id,
      text: question.text,
      answer: question.answer,
      categoryId: question.categoryId,
      subcategoryId: question.subcategoryId || 0,
      difficulty: question.difficulty,
      imageUrl: question.imageUrl || "",
      videoUrl: question.videoUrl || "",
      mediaType: question.imageUrl ? "image" : question.videoUrl ? "video" : "none",
      keywords: question.keywords || "",
      isActive: question.isActive,
    });
    setIsEditMode(true);
    setDialogOpen(true);
  };

  // إرسال نموذج السؤال (إضافة أو تعديل)
  const onSubmitQuestion = async (values: Question) => {
    try {
      setSaving(true);
      // حفظ البيانات عبر API
      const url = isEditMode ? `/api/questions/${values.id}` : "/api/questions";
      const method = isEditMode ? "PUT" : "POST";

      const response = await apiRequest(method, url, values);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "فشلت عملية الحفظ");
      }

      const savedQuestion = await response.json();
      
      if (isEditMode) {
        // تحديث السؤال في القائمة المحلية بدون إعادة تعيين صفحة العرض
        const selectedCategory = categories.find(c => c.id === values.categoryId);
        
        const updatedQuestions = questions.map((q) =>
          q.id === values.id
            ? {
                ...q,
                ...values,
                categoryName: selectedCategory?.name || "",
                categoryIcon: selectedCategory?.icon || "",
                subcategoryName: values.subcategoryId && selectedCategory
                  ? selectedCategory.children.find((s) => s.id === values.subcategoryId)?.name || ""
                  : "",
              }
            : q
        );
        
        setQuestions(updatedQuestions);
        
        // تحديث الأسئلة المفلترة بنفس الطريقة للحفاظ على حالة الفلتر والصفحة الحالية
        setFilteredQuestions(prevFilteredQuestions => 
          prevFilteredQuestions.map((q) =>
            q.id === values.id
              ? {
                  ...q,
                  ...values,
                  categoryName: selectedCategory?.name || "",
                  categoryIcon: selectedCategory?.icon || "",
                  subcategoryName: values.subcategoryId && selectedCategory
                    ? selectedCategory.children.find((s) => s.id === values.subcategoryId)?.name || ""
                    : "",
                }
              : q
          )
        );
      } else {
        // إضافة السؤال الجديد للقائمة المحلية
        const selectedCategory = categories.find(c => c.id === savedQuestion.categoryId);
        
        const newQuestion = {
          ...savedQuestion,
          categoryName: selectedCategory?.name || "",
          categoryIcon: selectedCategory?.icon || "",
          subcategoryName: savedQuestion.subcategoryId && selectedCategory
            ? selectedCategory.children.find((s) => s.id === savedQuestion.subcategoryId)?.name || ""
            : "",
          usageCount: 0,
          createdAt: new Date().toISOString(),
        };
        
        setQuestions(prev => [...prev, newQuestion]);
        
        // في حالة الإضافة الجديدة، نحدث أيضاً القائمة المفلترة إذا كان السؤال الجديد يتوافق مع الفلاتر الحالية
        // لكن هنا نعيد للصفحة الأولى ليرى المستخدم السؤال الجديد
        setCurrentPage(1);
      }

      toast({
        title: isEditMode ? "تم تحديث السؤال" : "تمت إضافة السؤال",
        description: isEditMode
          ? "تم تحديث بيانات السؤال بنجاح."
          : "تمت إضافة السؤال الجديد بنجاح.",
      });

      setDialogOpen(false);
    } catch (error: any) {
      toast({
        title: "خطأ في الحفظ",
        description: error.message || "حدث خطأ أثناء محاولة حفظ السؤال.",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };

  // حذف سؤال
  const deleteQuestion = async (questionId: number) => {
    if (!window.confirm("هل أنت متأكد من حذف هذا السؤال؟")) {
      return;
    }

    try {
      const response = await apiRequest("DELETE", `/api/questions/${questionId}`);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "فشلت عملية الحذف");
      }

      // حذف السؤال من القائمة المحلية
      setQuestions(questions.filter((q) => q.id !== questionId));

      toast({
        title: "تم حذف السؤال",
        description: "تم حذف السؤال بنجاح.",
      });
    } catch (error: any) {
      toast({
        title: "خطأ في الحذف",
        description: error.message || "حدث خطأ أثناء محاولة حذف السؤال.",
        variant: "destructive",
      });
    }
  };
  
  // تصدير الأسئلة إلى ملف
  // إنشاء نموذج استيراد فارغ مع أمثلة
const createImportTemplate = async (format: 'csv' | 'excel') => {
  try {
    console.log("جاري إنشاء نموذج استيراد الأسئلة");
    
    // جمع قائمة بأسماء الفئات المتاحة للمساعدة في الاستيراد
    const categoryOptions = categories.map(c => c.name).join(', ');
    const currentCategories = categories.map(c => c.name);
    
    // البحث عن فئة كرة قدم أو رياضة
    let sportsCategory = categories.find(c => c.name === 'كرة قدم')?.name || 
                         categories.find(c => c.name === 'رياضة')?.name || 
                         (categories.length > 0 ? categories[0].name : 'كرة قدم');
    
    // تحديد فئة فرعية ذات صلة بكرة القدم
    let footballSubcategory = '';
    const sportsCat = categories.find(c => c.name === sportsCategory);
    if (sportsCat && sportsCat.children && sportsCat.children.length > 0) {
      footballSubcategory = sportsCat.children.find(s => s.name.includes('قدم') || s.name.includes('عالم'))?.name || 
                           sportsCat.children[0].name;
    }
    
    // إنشاء بيانات النموذج مع أمثلة باستخدام الفئات الموجودة فعلياً في النظام
    const templateData = [
      {
        'نص السؤال': 'من الفائز بكأس العالم 2022؟',
        'الإجابة': 'الأرجنتين',
        'الفئة': sportsCategory,
        'الفئة الفرعية': footballSubcategory,
        'الصعوبة': 'متوسط',
        'الكلمات المفتاحية': 'كأس العالم,قطر,ميسي',
        'رابط الصورة': 'https://upload.wikimedia.org/wikipedia/commons/b/b9/Flag_of_Argentina.svg',
        'رابط الفيديو': ''
      },
      {
        'نص السؤال': 'من هو أول لاعب في التاريخ يسجل هاتريك في نهائيات كأس العالم؟',
        'الإجابة': 'بيرت باتيناود',
        'الفئة': sportsCategory,
        'الفئة الفرعية': footballSubcategory,
        'الصعوبة': 'صعب',
        'الكلمات المفتاحية': 'كأس العالم,هاتريك,تاريخ',
        'رابط الصورة': '',
        'رابط الفيديو': ''
      },
      {
        'نص السؤال': 'ما هي عاصمة فرنسا؟',
        'الإجابة': 'باريس',
        'الفئة': categories.find(c => c.name.includes('معلومات') || c.name.includes('جغرافيا'))?.name || sportsCategory,
        'الفئة الفرعية': '',
        'الصعوبة': 'سهل',
        'الكلمات المفتاحية': 'فرنسا,عواصم,أوروبا',
        'رابط الصورة': 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Paris_Night.jpg/1280px-Paris_Night.jpg',
        'رابط الفيديو': ''
      },
      // نموذج فارغ للاستخدام
      {
        'نص السؤال': '',
        'الإجابة': '',
        'الفئة': '',
        'الفئة الفرعية': '',
        'الصعوبة': '',
        'الكلمات المفتاحية': '',
        'رابط الصورة': '',
        'رابط الفيديو': ''
      }
    ];
    
    // إنشاء ورقة تعليمات
    const instructionsData = [
      { 'تعليمات': 'تعليمات استيراد الأسئلة:' },
      { 'تعليمات': '1. الحقول المطلوبة هي: نص السؤال، الإجابة، الفئة' },
      { 'تعليمات': '2. الفئات المتاحة حالياً في النظام: ' + categoryOptions },
      { 'تعليمات': '3. يجب أن تكون الفئات مطابقة بالضبط للفئات الموجودة في النظام، وإلا لن يتم استيراد السؤال' },
      { 'تعليمات': '4. قيم حقل الصعوبة المقبولة: سهل، متوسط، صعب' },
      { 'تعليمات': '5. لإضافة صورة، ضع رابط الصورة في عمود "رابط الصورة"' },
      { 'تعليمات': '6. لإضافة فيديو، ضع رابط الفيديو في عمود "رابط الفيديو"' },
      { 'تعليمات': '7. يمكن إضافة إما صورة أو فيديو للسؤال الواحد، وليس كلاهما' },
      { 'تعليمات': '8. الأسئلة المستوردة ستكون غير فعالة حتى يتم تفعيلها من لوحة التحكم' }
    ];
    
    // إنشاء ورقة عمل للنموذج وورقة أخرى للتعليمات
    const worksheetTemplate = XLSX.utils.json_to_sheet(templateData);
    const worksheetInstructions = XLSX.utils.json_to_sheet(instructionsData);
    
    // تعديل عرض الأعمدة
    const colWidth = [
      { wch: 40 }, // نص السؤال
      { wch: 30 }, // الإجابة
      { wch: 20 }, // الفئة
      { wch: 20 }, // الفئة الفرعية
      { wch: 10 }, // الصعوبة
      { wch: 25 }, // الكلمات المفتاحية
      { wch: 50 }, // رابط الصورة
      { wch: 50 }  // رابط الفيديو
    ];
    
    worksheetTemplate['!cols'] = colWidth;
    
    // إنشاء الملف
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheetTemplate, 'نموذج الأسئلة');
    XLSX.utils.book_append_sheet(workbook, worksheetInstructions, 'تعليمات');
    
    // تحديد اسم الملف حسب الصيغة
    const filename = format === 'csv' ? 'نموذج_استيراد_الأسئلة.csv' : 'نموذج_استيراد_الأسئلة.xlsx';
    
    // تصدير الملف
    XLSX.writeFile(workbook, filename);
    
    toast({
      title: 'تم إنشاء نموذج الاستيراد بنجاح',
      description: `تم إنشاء نموذج فارغ لاستيراد الأسئلة. استخدم هذا النموذج لإعداد ملفات استيراد صحيحة.`,
    });
  } catch (error: any) {
    console.error("خطأ في إنشاء نموذج الاستيراد:", error);
    toast({
      title: 'خطأ في إنشاء النموذج',
      description: error.message || 'حدث خطأ أثناء محاولة إنشاء نموذج الاستيراد.',
      variant: 'destructive',
    });
  }
};

const exportQuestions = async (format: 'csv' | 'excel') => {
    try {
      // تحضير بيانات التصدير - تبسيط البيانات، حذف الحقول غير الضرورية للتوافق مع متطلبات الاستيراد
      const exportData = filteredQuestions.map(q => ({
        'نص السؤال': q.text,
        'الإجابة': q.answer,
        'الفئة': q.categoryName,
        'الفئة الفرعية': q.subcategoryName || '',
        'الصعوبة': q.difficulty === 1 ? 'سهل' : q.difficulty === 2 ? 'متوسط' : 'صعب',
        'الكلمات المفتاحية': q.keywords || '',
        'رابط الصورة': q.imageUrl || '',
        'رابط الفيديو': q.videoUrl || ''
      }));

      // إنشاء ورقة عمل
      const worksheet = XLSX.utils.json_to_sheet(exportData);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, 'الأسئلة');

      // تصدير الملف
      if (format === 'csv') {
        XLSX.writeFile(workbook, 'الأسئلة.csv');
      } else {
        XLSX.writeFile(workbook, 'الأسئلة.xlsx');
      }

      toast({
        title: 'تم التصدير بنجاح',
        description: `تم تصدير ${exportData.length} سؤال إلى ملف ${format === 'excel' ? 'Excel' : 'CSV'} بنجاح.`,
      });
    } catch (error: any) {
      toast({
        title: 'خطأ في التصدير',
        description: error.message || 'حدث خطأ أثناء محاولة تصدير الأسئلة.',
        variant: 'destructive',
      });
    }
  };

  // استيراد الأسئلة من ملف
  const handleImportFile = async (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    try {
      setImporting(true);
      console.log("بدء عملية استيراد الأسئلة من ملف");
      
      // قراءة الملف
      const data = await file.arrayBuffer();
      const workbook = XLSX.read(data);
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      let parsedData = XLSX.utils.sheet_to_json(worksheet) as Record<string, any>[];
      
      console.log("تم قراءة البيانات من الملف:", parsedData.length, "سجل");
      
      // التحقق من تطابق الفئات الموجودة في الملف مع الفئات الموجودة في النظام
      const missingCategoriesArray: string[] = [];
      const validRows: Record<string, any>[] = [];
      const invalidRows: Record<string, any>[] = [];
      
      // فحص كل سجل في الملف المستورد
      for (const row of parsedData) {
        const categoryName = row['الفئة'] as string || '';
        if (!categoryName) {
          console.log("سجل بدون فئة، سيتم تخطيه:", row);
          invalidRows.push(row);
          continue;
        }
        
        // البحث عن الفئة في النظام
        const category = findCategoryByName(categoryName, categories);
        if (!category) {
          // إذا لم تكن الفئة موجودة وليست مضافة بالفعل للقائمة
          if (!missingCategoriesArray.includes(categoryName)) {
            missingCategoriesArray.push(categoryName);
          }
          console.log(`الفئة غير موجودة: "${categoryName}"، سيتم تخطي السؤال:`, row['نص السؤال']);
          invalidRows.push(row);
        } else {
          validRows.push(row);
        }
      }
      
      // إذا وجدت فئات غير متطابقة، قم بإظهار تنبيه للمستخدم
      if (missingCategoriesArray.length > 0) {
        const missingCategoriesList = missingCategoriesArray.join('، ');
        const invalidCount = invalidRows.length;
        const validCount = validRows.length;
        
        toast({
          title: 'فئات غير متطابقة',
          description: `هناك ${missingCategoriesArray.length} فئة غير متطابقة: ${missingCategoriesList}. سيتم تخطي ${invalidCount} سؤال وسيتم استيراد ${validCount} سؤال فقط.`,
          variant: 'destructive',
        });
        
        // إذا لم تكن هناك صفوف صالحة، قم بإلغاء الاستيراد
        if (validRows.length === 0) {
          toast({
            title: 'فشل الاستيراد',
            description: 'لا توجد أسئلة صالحة للاستيراد. تأكد من تطابق الفئات مع الفئات الموجودة في النظام.',
            variant: 'destructive',
          });
          setImporting(false);
          return;
        }
        
        // استخدام الصفوف الصالحة فقط
        parsedData = validRows;
      }

      // تحويل البيانات إلى تنسيق الأسئلة
      const questionsData = [];
      
      for (const row of parsedData) {
        // تحديد الفئة الرئيسية والفرعية
        const categoryName = row['الفئة'] || '';
        const subcategoryName = row['الفئة الفرعية'] || '';
        
        if (!categoryName) {
          console.log("سجل بدون فئة، سيتم تخطيه:", row);
          continue;
        }
        
        let categoryId = 0;
        let subcategoryId = 0;
        
        // البحث عن الفئة الرئيسية بشكل مرن
        // 1. البحث عن تطابق تام
        let category = categories.find(c => c.name === categoryName);
        
        // 2. البحث بتجاهل أل التعريف
        if (!category) {
          // إذا بدأ الاسم بـ "ال" نبحث بدونها
          if (categoryName.startsWith('ال')) {
            category = categories.find(c => c.name === categoryName.substring(2));
          } 
          // وإذا لم يبدأ بـ "ال" نضيفها ونبحث
          else {
            category = categories.find(c => c.name === 'ال' + categoryName);
          }
        }
        
        // 3. البحث بتجاهل الفراغات والأحرف الخاصة
        if (!category) {
          // تنظيف الأسماء للمقارنة
          const cleanName = categoryName.replace(/\s+/g, '').replace(/[ًٌٍَُِّْ]/g, '');
          category = categories.find(c => {
            const cleanCategoryName = c.name.replace(/\s+/g, '').replace(/[ًٌٍَُِّْ]/g, '');
            return cleanCategoryName === cleanName;
          });
        }
        
        if (category) {
          categoryId = category.id;
          
          // البحث عن الفئة الفرعية إذا وجدت بشكل مرن
          if (subcategoryName && category.children) {
            // 1. البحث عن تطابق تام
            let subcategory = category.children.find(s => s.name === subcategoryName);
            
            // 2. البحث بتجاهل أل التعريف
            if (!subcategory) {
              // إذا بدأ الاسم بـ "ال" نبحث بدونها
              if (subcategoryName.startsWith('ال')) {
                subcategory = category.children.find(s => s.name === subcategoryName.substring(2));
              } 
              // وإذا لم يبدأ بـ "ال" نضيفها ونبحث
              else {
                subcategory = category.children.find(s => s.name === 'ال' + subcategoryName);
              }
            }
            
            // 3. البحث بتجاهل الفراغات والأحرف الخاصة
            if (!subcategory) {
              // تنظيف الأسماء للمقارنة
              const cleanName = subcategoryName.replace(/\s+/g, '').replace(/[ًٌٍَُِّْ]/g, '');
              subcategory = category.children.find(s => {
                const cleanSubCategoryName = s.name.replace(/\s+/g, '').replace(/[ًٌٍَُِّْ]/g, '');
                return cleanSubCategoryName === cleanName;
              });
            }
            
            if (subcategory) {
              subcategoryId = subcategory.id;
              console.log("تم العثور على الفئة الفرعية:", subcategoryName, "=>", subcategory.name);
            } else {
              console.log("لم يتم العثور على الفئة الفرعية:", subcategoryName);
            }
          }
        } else {
          console.log("لم يتم العثور على الفئة:", categoryName);
          continue;
        }
        
        // تحديد النص والإجابة
        const text = row['نص السؤال'] || row['السؤال'] || '';
        const answer = row['الإجابة'] || '';
        
        if (!text || !answer) {
          console.log("سجل بدون سؤال أو إجابة، سيتم تخطيه:", row);
          continue;
        }
        
        // تحديد مستوى الصعوبة
        let difficulty = 1;
        const difficultyText = row['الصعوبة'] || '';
        if (typeof difficultyText === 'string') {
          if (difficultyText.includes('متوسط')) {
            difficulty = 2;
          } else if (difficultyText.includes('صعب')) {
            difficulty = 3;
          }
        } else if (typeof difficultyText === 'number') {
          difficulty = difficultyText >= 1 && difficultyText <= 3 ? difficultyText : 1;
        }
        
        // إنشاء كائن السؤال
        const questionData = {
          text,
          answer,
          categoryId,
          subcategoryId,
          difficulty,
          imageUrl: row['رابط الصورة'] || '',
          videoUrl: row['رابط الفيديو'] || '',
          mediaType: row['رابط الصورة'] ? 'image' : row['رابط الفيديو'] ? 'video' : 'none',
          keywords: row['الكلمات المفتاحية'] || '',
          isActive: false // الأسئلة المستوردة تكون غير فعالة افتراضياً
        };
        
        questionsData.push(questionData);
      }
      
      console.log("تم تحضير", questionsData.length, "سؤال للاستيراد");
      
      // إذا لم تكن هناك أسئلة صالحة
      if (questionsData.length === 0) {
        throw new Error('لم يتم العثور على أي أسئلة صالحة في الملف');
      }
      
      // إرسال الأسئلة إلى الخادم
      const response = await apiRequest('POST', '/api/import-questions', { questions: questionsData });
      console.log("استجابة الخادم:", response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'فشلت عملية الاستيراد');
      }
      
      const result = await response.json();
      
      // تحديث القائمة المحلية
      fetchQuestions();
      
      toast({
        title: 'تم الاستيراد بنجاح',
        description: `تم استيراد ${result.imported} سؤال بنجاح. الأسئلة المستوردة بحالة غير فعّالة.`,
      });
      
      // إعادة تعيين حقل الملف
      e.target.value = '';
    } catch (error: any) {
      toast({
        title: 'خطأ في الاستيراد',
        description: error.message || 'حدث خطأ أثناء محاولة استيراد الأسئلة.',
        variant: 'destructive',
      });
    } finally {
      setImporting(false);
    }
  };

  // استيراد الأسئلة من رابط
  const importQuestionsFromURL = async (url: string) => {
    if (!url) return;
    
    try {
      setImporting(true);
      console.log("بدء عملية استيراد الأسئلة من الرابط:", url);
      
      // إرسال الرابط إلى الخادم
      const response = await apiRequest('POST', '/api/import-questions-from-url', { url });
      console.log("استجابة الخادم:", response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'فشلت عملية الاستيراد من الرابط');
      }
      
      const result = await response.json();
      console.log("نتيجة الاستيراد:", result);
      
      // تحديث القائمة المحلية
      fetchQuestions();
      
      toast({
        title: 'تم الاستيراد بنجاح',
        description: `تم استيراد ${result.imported} سؤال من الرابط بنجاح. الأسئلة المستوردة بحالة غير فعّالة.`,
      });
    } catch (error: any) {
      console.error("خطأ في استيراد الأسئلة من الرابط:", error);
      toast({
        title: 'خطأ في الاستيراد',
        description: error.message || 'حدث خطأ أثناء محاولة استيراد الأسئلة من الرابط.',
        variant: 'destructive',
      });
    } finally {
      setImporting(false);
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">إدارة الأسئلة</h2>
        <div className="flex gap-2">
          <div className="relative group">
            <Button 
              variant="outline"
              className="flex items-center gap-2"
            >
              <span>استيراد / تصدير</span>
              <ChevronDown className="h-4 w-4" />
            </Button>
            <div className="hidden group-hover:flex absolute bg-background border rounded-md shadow-md p-2 mt-1 w-56 flex-col gap-1 z-10 right-0">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => exportQuestions('csv')}
                className="justify-start"
              >
                <FileText className="w-4 h-4 ml-2" />
                تصدير CSV
              </Button>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => exportQuestions('excel')}
                className="justify-start"
              >
                <FileSpreadsheet className="w-4 h-4 ml-2" />
                تصدير Excel
              </Button>
              <hr className="my-1" />
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => createImportTemplate('excel')}
                className="justify-start"
              >
                <Download className="w-4 h-4 ml-2" />
                تنزيل نموذج استيراد
              </Button>
              <hr className="my-1" />
              <label className="cursor-pointer w-full">
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="justify-start w-full"
                  onClick={() => document.getElementById('importFile')?.click()}
                >
                  <Upload className="w-4 h-4 ml-2" />
                  استيراد ملف
                </Button>
                <input 
                  type="file" 
                  id="importFile" 
                  accept=".csv,.xlsx,.xls" 
                  className="hidden" 
                  onChange={handleImportFile}
                />
              </label>
              <hr className="my-1" />
              <Button 
                variant="ghost" 
                size="sm" 
                className="justify-start"
                onClick={() => {
                  const url = prompt('أدخل رابط ملف Google Sheets أو أي رابط متوافق');
                  if (url) importQuestionsFromURL(url);
                }}
              >
                <ExternalLink className="w-4 h-4 ml-2" />
                استيراد من رابط
              </Button>
            </div>
          </div>
          <Button 
            onClick={showAddQuestionForm}
            className="flex items-center gap-1"
          >
            <Plus className="h-4 w-4" />
            <span>إضافة سؤال جديد</span>
          </Button>
        </div>
      </div>

      {/* قسم فلاتر البحث */}
      <div className="mb-6 border rounded-lg p-4 bg-muted/10">
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-lg font-semibold">فلاتر البحث والتصفية</h3>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => setShowFilters(!showFilters)}
          >
            {showFilters ? (
              <>
                <ChevronUp className="h-4 w-4 ml-1" />
                إخفاء الفلاتر
              </>
            ) : (
              <>
                <ChevronDown className="h-4 w-4 ml-1" />
                إظهار الفلاتر
              </>
            )}
          </Button>
        </div>
        
        {showFilters && (
          <div className="p-4 rounded-lg border">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              {/* فلتر البحث النصي */}
              <div>
                <span className="mb-1 block">بحث في النص</span>
                <Input
                  placeholder="اكتب نص للبحث..."
                  value={filterText}
                  onChange={(e) => setFilterText(e.target.value)}
                  className="w-full"
                />
              </div>
              
              {/* فلتر الفئة الرئيسية */}
              <div>
                <span className="mb-1 block">الفئة الرئيسية</span>
                <select
                  className="w-full rounded-md border border-input bg-background px-3 py-2"
                  value={filterCategoryId || ""}
                  onChange={(e) => {
                    const value = e.target.value;
                    setFilterCategoryId(value ? parseInt(value) : null);
                    setFilterSubcategoryId(null); // إعادة تعيين الفئة الفرعية
                  }}
                >
                  <option value="">كل الفئات</option>
                  {categories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.name} ({category.availableQuestions || questions.filter(q => q.categoryId === category.id).length})
                    </option>
                  ))}
                </select>
              </div>
              
              {/* فلتر الفئة الفرعية */}
              <div>
                <span className="mb-1 block">الفئة الفرعية</span>
                <select
                  className="w-full rounded-md border border-input bg-background px-3 py-2"
                  value={filterSubcategoryId || ""}
                  onChange={(e) => {
                    const value = e.target.value;
                    setFilterSubcategoryId(value ? parseInt(value) : null);
                  }}
                  disabled={!filterCategoryId}
                >
                  <option value="">كل الفئات الفرعية</option>
                  {filterCategoryId &&
                    categories
                      .find((c) => c.id === filterCategoryId)
                      ?.children.map((subcat) => (
                        <option key={subcat.id} value={subcat.id}>
                          {subcat.name} ({subcat.availableQuestions || questions.filter(q => q.subcategoryId === subcat.id).length})
                        </option>
                      ))}
                </select>
              </div>
              
              {/* فلتر الحالة (فعال/غير فعال) */}
              <div>
                <span className="mb-1 block">الحالة</span>
                <select
                  className="w-full rounded-md border border-input bg-background px-3 py-2"
                  value={filterActive}
                  onChange={(e) => setFilterActive(e.target.value)}
                >
                  <option value="all">جميع الأسئلة</option>
                  <option value="active">الأسئلة الفعالة</option>
                  <option value="inactive">الأسئلة غير الفعالة</option>
                </select>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* فلتر التاريخ (من) */}
              <div>
                <span className="mb-1 block">من تاريخ</span>
                <Input
                  type="date"
                  value={filterDateFrom || ""}
                  onChange={(e) => setFilterDateFrom(e.target.value || null)}
                  className="w-full"
                />
              </div>
              
              {/* فلتر التاريخ (إلى) */}
              <div>
                <span className="mb-1 block">إلى تاريخ</span>
                <Input
                  type="date"
                  value={filterDateTo || ""}
                  onChange={(e) => setFilterDateTo(e.target.value || null)}
                  className="w-full"
                />
              </div>
              
              {/* فلتر عدد مرات الاستخدام (الحد الأدنى) */}
              <div>
                <span className="mb-1 block">الاستخدام (الحد الأدنى)</span>
                <Input
                  type="number"
                  min="0"
                  placeholder="أدنى استخدام"
                  value={filterUsageMin !== null ? filterUsageMin : ""}
                  onChange={(e) => {
                    const value = e.target.value;
                    setFilterUsageMin(value ? parseInt(value) : null);
                  }}
                  className="w-full"
                />
              </div>
              
              {/* فلتر عدد مرات الاستخدام (الحد الأقصى) */}
              <div>
                <span className="mb-1 block">الاستخدام (الحد الأقصى)</span>
                <Input
                  type="number"
                  min="0"
                  placeholder="أقصى استخدام"
                  value={filterUsageMax !== null ? filterUsageMax : ""}
                  onChange={(e) => {
                    const value = e.target.value;
                    setFilterUsageMax(value ? parseInt(value) : null);
                  }}
                  className="w-full"
                />
              </div>
            </div>
            
            <div className="flex justify-end mt-4 gap-2">
              <Button
                variant="outline"
                onClick={() => {
                  setFilterText("");
                  setFilterCategoryId(null);
                  setFilterSubcategoryId(null);
                  setFilterUsageMin(null);
                  setFilterUsageMax(null);
                  setFilterDateFrom(null);
                  setFilterDateTo(null);
                }}
              >
                إعادة تعيين الفلاتر
              </Button>
            </div>
          </div>
        )}
        
        {/* عرض نتائج الفلترة */}
        {questions.length > 0 && (
          <div className="mt-2 text-sm">
            تم العثور على <span className="font-bold">{filteredQuestions.length}</span> سؤال من إجمالي <span className="font-bold">{questions.length}</span>
          </div>
        )}
      </div>

      {loading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
        </div>
      ) : filteredQuestions.length === 0 ? (
        <div className="text-center p-8 border rounded-lg bg-muted/30">
          <p className="text-lg">لا توجد أسئلة مطابقة للفلاتر المحددة.</p>
        </div>
      ) : (
        <div>
          {/* خيارات عرض الجدول */}
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center gap-2">
              <span className="text-sm">عدد الأسئلة في الصفحة:</span>
              <select
                className="w-24 p-1 border rounded-md"
                value={pageSize}
                onChange={(e) => setPageSize(Number(e.target.value))}
              >
                <option value={10}>10</option>
                <option value={20}>20</option>
                <option value={50}>50</option>
                <option value={100}>100</option>
              </select>
            </div>
            <div className="text-sm">
              عرض {(currentPage - 1) * pageSize + 1} إلى {Math.min(currentPage * pageSize, filteredQuestions.length)} من إجمالي {filteredQuestions.length} سؤال
            </div>
          </div>
          
          <div className="border rounded-lg overflow-hidden">
            <div className="overflow-x-auto">
              {/* قسم أزرار العمليات الجماعية */}
              {selectedQuestions.length > 0 && (
                <div className="mb-3 p-3 bg-muted/20 border rounded-lg">
                  <div className="flex items-center justify-between">
                    <div className="font-medium">
                      تم تحديد {selectedQuestions.length} سؤال
                    </div>
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleBulkToggleActive(true)}
                        disabled={bulkProcessing}
                      >
                        {bulkProcessing ? (
                          <Loader2 className="h-4 w-4 animate-spin ml-2" />
                        ) : (
                          <CheckCircle className="h-4 w-4 ml-2" />
                        )}
                        تفعيل الكل
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleBulkToggleActive(false)}
                        disabled={bulkProcessing}
                      >
                        {bulkProcessing ? (
                          <Loader2 className="h-4 w-4 animate-spin ml-2" />
                        ) : (
                          <XCircle className="h-4 w-4 ml-2" />
                        )}
                        إلغاء تفعيل الكل
                      </Button>
                      <div className="relative">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setBulkCategoryOpen(!bulkCategoryOpen)}
                          disabled={bulkProcessing}
                        >
                          {bulkProcessing ? (
                            <Loader2 className="h-4 w-4 animate-spin ml-2" />
                          ) : (
                            <LinkIcon className="h-4 w-4 ml-2" />
                          )}
                          نقل إلى فئة
                        </Button>
                        {bulkCategoryOpen && (
                          <div className="absolute left-0 mt-2 w-64 p-2 bg-white rounded-md shadow-lg border z-50">
                            <div className="pb-2 mb-2 border-b">
                              <h4 className="font-medium text-primary">اختر الفئة</h4>
                            </div>
                            {categories.map((category) => (
                              <div key={category.id} className="mb-2">
                                <div
                                  className="flex items-center p-2 hover:bg-muted rounded cursor-pointer"
                                  onClick={() => handleBulkMoveToCategory(category.id, null)}
                                >
                                  {category.name} ({category.availableQuestions || 0})
                                </div>
                                <div className="pl-3 mt-1">
                                  {category.children.map((subcat) => (
                                    <div
                                      key={subcat.id}
                                      className="flex items-center p-1 hover:bg-muted rounded cursor-pointer text-sm"
                                      onClick={() => handleBulkMoveToCategory(category.id, subcat.id)}
                                    >
                                      {subcat.name} ({subcat.availableQuestions || 0})
                                    </div>
                                  ))}
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                      
                      <div className="relative">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setBulkDifficultyOpen(!bulkDifficultyOpen)}
                          disabled={bulkProcessing}
                        >
                          {bulkProcessing ? (
                            <Loader2 className="h-4 w-4 animate-spin ml-2" />
                          ) : (
                            <ChevronUp className="h-4 w-4 ml-2" />
                          )}
                          تغيير الصعوبة
                        </Button>
                        {bulkDifficultyOpen && (
                          <div className="absolute left-0 mt-2 w-40 p-2 bg-white rounded-md shadow-lg border z-50">
                            <div className="pb-2 mb-2 border-b">
                              <h4 className="font-medium text-primary">مستوى الصعوبة</h4>
                            </div>
                            <div
                              className="flex items-center p-2 hover:bg-muted rounded cursor-pointer"
                              onClick={() => handleBulkChangeDifficulty(1)}
                            >
                              سهل
                            </div>
                            <div
                              className="flex items-center p-2 hover:bg-muted rounded cursor-pointer"
                              onClick={() => handleBulkChangeDifficulty(2)}
                            >
                              متوسط
                            </div>
                            <div
                              className="flex items-center p-2 hover:bg-muted rounded cursor-pointer"
                              onClick={() => handleBulkChangeDifficulty(3)}
                            >
                              صعب
                            </div>
                          </div>
                        )}
                      </div>
                      
                      <Button
                        variant="destructive"
                        size="sm"
                        onClick={handleBulkDelete}
                        disabled={bulkProcessing}
                      >
                        {bulkProcessing ? (
                          <Loader2 className="h-4 w-4 animate-spin ml-2" />
                        ) : (
                          <Trash2 className="h-4 w-4 ml-2" />
                        )}
                        حذف المحدد
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          setSelectedQuestions([]);
                          setSelectAll(false);
                        }}
                      >
                        <X className="h-4 w-4 ml-2" />
                        إلغاء التحديد
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            
              <table className="w-full">
                <thead className="bg-muted/50">
                  <tr>
                    <th className="p-3 text-center w-10">
                      <Checkbox 
                        checked={selectAll}
                        onCheckedChange={handleSelectAll}
                        aria-label="تحديد الكل"
                      />
                    </th>
                    <th className="p-3 text-center">#</th>
                    <th className="p-3 text-right">السؤال</th>
                    <th className="p-3 text-right">الإجابة</th>
                    <th className="p-3 text-right">الفئة</th>
                    <th className="p-3 text-right">الصعوبة</th>
                    <th className="p-3 text-right">الاستخدام</th>
                    <th className="p-3 text-right">التاريخ</th>
                    <th className="p-3 text-right">الحالة</th>
                    <th className="p-3 text-right">الإجراءات</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredQuestions.slice(
                    (currentPage - 1) * pageSize,
                    currentPage * pageSize
                  ).map((question, index) => (
                  <tr key={question.id} className={`border-b hover:bg-muted/20 ${selectedQuestions.includes(question.id) ? 'bg-muted/30' : ''}`}>
                    <td className="p-3 text-center">
                      <Checkbox 
                        checked={selectedQuestions.includes(question.id)}
                        onCheckedChange={() => handleSelectQuestion(question.id)}
                        aria-label={`تحديد السؤال رقم ${question.id}`}
                      />
                    </td>
                    <td className="p-3 text-center font-bold">{(currentPage - 1) * pageSize + index + 1}</td>
                    <td className="p-3 text-right">
                      <div className="flex items-center justify-between gap-2">
                        <div className="flex-1">
                          {question.text.length > 60
                            ? question.text.substring(0, 60) + "..."
                            : question.text}
                        </div>
                        <button 
                          className="hover:bg-muted p-1 rounded opacity-70 hover:opacity-100" 
                          onClick={() => handleQuickEdit(question.id, 'text', question.text)}
                          title="تعديل السؤال"
                        >
                          <Edit className="h-3.5 w-3.5 text-muted-foreground" />
                        </button>
                      </div>
                    </td>
                    <td className="p-3 text-right">
                      <div className="flex items-center justify-between gap-2">
                        <div className="flex-1">
                          {question.answer.length > 20
                            ? question.answer.substring(0, 20) + "..."
                            : question.answer}
                        </div>
                        <button 
                          className="hover:bg-muted p-1 rounded opacity-70 hover:opacity-100" 
                          onClick={() => handleQuickEdit(question.id, 'answer', question.answer)}
                          title="تعديل الإجابة"
                        >
                          <Edit className="h-3.5 w-3.5 text-muted-foreground" />
                        </button>
                      </div>
                    </td>
                    <td className="p-3 text-right">
                      <div className="flex items-center justify-between gap-2">
                        <div className="flex flex-col gap-1 flex-1">
                          <div className="font-bold text-primary">
                            {question.categoryName}
                          </div>
                          {question.subcategoryName && (
                            <div className="mt-1">
                              <span className="text-xs bg-primary/10 text-primary px-2 py-0.5 rounded-full">
                                {question.subcategoryName}
                              </span>
                            </div>
                          )}
                        </div>
                        <button 
                          className="hover:bg-muted p-1 rounded opacity-70 hover:opacity-100" 
                          onClick={() => handleQuickCategoryEdit(question.id, question.categoryId, question.subcategoryId)}
                          title="تغيير الفئة"
                        >
                          <FolderEdit className="h-3.5 w-3.5 text-muted-foreground" />
                        </button>
                      </div>
                    </td>
                    <td className="p-3 text-right">
                      <div className="flex items-center justify-between gap-2">
                        <div className="flex-1">
                          {question.difficulty === 1
                            ? "سهل"
                            : question.difficulty === 2
                              ? "متوسط"
                              : "صعب"}
                        </div>
                        <button 
                          className="hover:bg-muted p-1 rounded opacity-70 hover:opacity-100" 
                          onClick={() => handleQuickDifficultyEdit(question.id, question.difficulty)}
                          title="تغيير مستوى الصعوبة"
                        >
                          <BarChart2 className="h-3.5 w-3.5 text-muted-foreground" />
                        </button>
                      </div>
                    </td>
                    <td className="p-3 text-right">{question.usageCount} مرة</td>
                    <td className="p-3 text-right">
                      {new Date(question.createdAt).toLocaleDateString("ar", {
                        year: "numeric",
                        month: "2-digit",
                        day: "2-digit",
                        calendar: "gregory"
                      })}
                    </td>
                    <td className="p-3 text-right">
                      {question.isActive ? (
                        <span className="text-green-600 font-medium">فعال</span>
                      ) : (
                        <span className="text-red-600 font-medium">غير فعال</span>
                      )}
                    </td>
                    <td className="p-3 text-right">
                      <div className="flex items-center justify-end gap-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => showEditQuestionForm(question)}
                          className="h-8 px-2"
                        >
                          <Pencil className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => deleteQuestion(question.id)}
                          className="h-8 px-2 text-red-500 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
          
          {/* ترقيم الصفحات */}
          {filteredQuestions.length > pageSize && (
            <div className="flex justify-center mt-4">
              <div className="flex items-center gap-1">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(1)}
                  disabled={currentPage === 1}
                >
                  الأولى
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  السابق
                </Button>
                
                <div className="mx-2">
                  صفحة {currentPage} من {Math.ceil(filteredQuestions.length / pageSize)}
                </div>
                
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(currentPage + 1)}
                  disabled={currentPage >= Math.ceil(filteredQuestions.length / pageSize)}
                >
                  التالي
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(Math.ceil(filteredQuestions.length / pageSize))}
                  disabled={currentPage >= Math.ceil(filteredQuestions.length / pageSize)}
                >
                  الأخيرة
                </Button>
              </div>
            </div>
          )}
        </div>
      )}

      {/* نموذج إضافة/تعديل سؤال */}
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              {isEditMode ? "تعديل السؤال" : "إضافة سؤال جديد"}
            </DialogTitle>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmitQuestion)} className="space-y-4">
              {/* حقل نص السؤال */}
              <FormField
                control={form.control}
                name="text"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>نص السؤال</FormLabel>
                    <FormControl>
                      <Textarea
                        {...field}
                        placeholder="أدخل نص السؤال هنا"
                        className="h-24"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {/* حقل الإجابة */}
              <FormField
                control={form.control}
                name="answer"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>الإجابة الصحيحة</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="أدخل الإجابة الصحيحة" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {/* حقول الفئة والفئة الفرعية */}
              <div className="grid grid-cols-2 gap-4">
                {/* الفئة الرئيسية */}
                <FormField
                  control={form.control}
                  name="categoryId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>الفئة</FormLabel>
                      <FormControl>
                        <select
                          className="w-full rounded-md border border-input bg-background px-3 py-2"
                          value={field.value || "none"}
                          onChange={(e) => handleCategoryChange(e.target.value)}
                        >
                          <option value="none" disabled>
                            اختر الفئة
                          </option>
                          {categories.map((cat) => (
                            <option key={cat.id} value={cat.id}>
                              {cat.name}
                            </option>
                          ))}
                        </select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                {/* الفئة الفرعية */}
                <FormField
                  control={form.control}
                  name="subcategoryId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>الفئة الفرعية</FormLabel>
                      <FormControl>
                        <select
                          className="w-full rounded-md border border-input bg-background px-3 py-2"
                          value={field.value || 0}
                          onChange={(e) => {
                            form.setValue("subcategoryId", parseInt(e.target.value));
                          }}
                          disabled={!form.getValues("categoryId")}
                        >
                          <option value={0}>بدون فئة فرعية</option>
                          {form.getValues("categoryId") > 0 &&
                            categories
                              .find((c) => c.id === form.getValues("categoryId"))
                              ?.children.map((subcat) => (
                                <option key={subcat.id} value={subcat.id}>
                                  {subcat.name}
                                </option>
                              ))}
                        </select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              {/* مستوى الصعوبة */}
              <FormField
                control={form.control}
                name="difficulty"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>مستوى الصعوبة</FormLabel>
                    <FormControl>
                      <select
                        className="w-full rounded-md border border-input bg-background px-3 py-2"
                        value={field.value}
                        onChange={(e) => {
                          form.setValue("difficulty", parseInt(e.target.value));
                        }}
                      >
                        <option value={1}>سهل</option>
                        <option value={2}>متوسط</option>
                        <option value={3}>صعب</option>
                      </select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {/* الكلمات المفتاحية */}
              <FormField
                control={form.control}
                name="keywords"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>الكلمات المفتاحية</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        placeholder="أدخل الكلمات المفتاحية مفصولة بفواصل"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {/* رابط الصورة */}
              <FormField
                control={form.control}
                name="imageUrl"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>رابط الصورة</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        placeholder="أدخل رابط الصورة (اختياري)"
                      />
                    </FormControl>
                    <FormMessage />
                    {field.value && (
                      <div className="mt-2">
                        <img 
                          src={field.value} 
                          alt="معاينة الصورة" 
                          className="max-h-40 max-w-full object-contain rounded-md border"
                          onError={(e) => {
                            (e.target as HTMLImageElement).src = 'https://via.placeholder.com/300x200?text=صورة+غير+متوفرة';
                          }}
                        />
                      </div>
                    )}
                  </FormItem>
                )}
              />
              
              {/* رابط الفيديو */}
              <FormField
                control={form.control}
                name="videoUrl"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>رابط الفيديو</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        placeholder="أدخل رابط الفيديو (اختياري)"
                      />
                    </FormControl>
                    <FormMessage />
                    {field.value && (
                      <div className="mt-2">
                        <video 
                          src={field.value} 
                          controls 
                          className="max-h-40 max-w-full rounded-md border"
                          onError={(e) => {
                            const video = e.target as HTMLVideoElement;
                            video.style.display = 'none';
                            const errorDiv = document.createElement('div');
                            errorDiv.textContent = 'تعذر تحميل الفيديو';
                            errorDiv.className = 'p-2 bg-red-100 text-red-800 rounded-md text-center';
                            video.parentNode?.appendChild(errorDiv);
                          }}
                        />
                      </div>
                    )}
                  </FormItem>
                )}
              />
              
              {/* حقل الحالة */}
              <FormField
                control={form.control}
                name="isActive"
                render={({ field }) => (
                  <FormItem className="flex items-center space-x-2 space-y-0 rtl:space-x-reverse">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <div className="mr-2">
                      <FormLabel>تفعيل السؤال</FormLabel>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {/* زر الحفظ */}
              <div className="flex justify-end">
                <Button type="submit" disabled={saving}>
                  {saving ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : isEditMode ? (
                    "تحديث"
                  ) : (
                    "إضافة"
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      
      {/* نوافذ التعديل السريع */}
      {/* نافذة التعديل السريع للنص */}
      <Dialog open={showQuickEditModal} onOpenChange={setShowQuickEditModal}>
        <DialogContent className="max-w-xl">
          <DialogHeader>
            <DialogTitle>تعديل سريع للنص</DialogTitle>
          </DialogHeader>
          <div className="p-4">
            {quickEditField === 'text' ? (
              <div>
                <label className="mb-2 block">نص السؤال</label>
                <Textarea 
                  value={quickEditValue as string || ''} 
                  onChange={(e) => setQuickEditValue(e.target.value)}
                  rows={4}
                  className="w-full"
                />
              </div>
            ) : (
              <div>
                <label className="mb-2 block">الإجابة</label>
                <Input 
                  value={quickEditValue as string || ''} 
                  onChange={(e) => setQuickEditValue(e.target.value)}
                  className="w-full"
                />
              </div>
            )}
            <div className="flex justify-end gap-2 mt-4">
              <Button
                variant="outline"
                onClick={() => {
                  setShowQuickEditModal(false);
                  setQuickEditId(null);
                  setQuickEditField(null);
                  setQuickEditValue(null);
                }}
              >
                إلغاء
              </Button>
              <Button onClick={saveQuickEdit}>حفظ</Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      
      {/* نافذة التعديل السريع للفئة */}
      <Dialog open={showQuickCategoryModal} onOpenChange={setShowQuickCategoryModal}>
        <DialogContent className="max-w-xl">
          <DialogHeader>
            <DialogTitle>تغيير الفئة والفئة الفرعية</DialogTitle>
          </DialogHeader>
          <div className="p-4">
            <Form {...setEditForm}>
              <form className="space-y-4">
                <FormField
                  control={setEditForm.control}
                  name="categoryId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>الفئة</FormLabel>
                      <select
                        className="w-full rounded-md border border-input bg-background px-3 py-2"
                        value={field.value}
                        onChange={(e) => {
                          field.onChange(parseInt(e.target.value));
                          setEditForm.setValue("subcategoryId", undefined);
                        }}
                      >
                        <option value="" disabled>اختر الفئة...</option>
                        {categories.map((category) => (
                          <option key={category.id} value={category.id}>
                            {category.name}
                          </option>
                        ))}
                      </select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={setEditForm.control}
                  name="subcategoryId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>الفئة الفرعية</FormLabel>
                      <select
                        className="w-full rounded-md border border-input bg-background px-3 py-2"
                        value={field.value || ""}
                        onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}
                        disabled={!setEditForm.watch("categoryId")}
                      >
                        <option value="">بدون فئة فرعية</option>
                        {setEditForm.watch("categoryId") &&
                          categories
                            .find((c) => c.id === setEditForm.watch("categoryId"))
                            ?.children.map((subcat) => (
                              <option key={subcat.id} value={subcat.id}>
                                {subcat.name}
                              </option>
                            ))}
                      </select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </form>
            </Form>
            <div className="flex justify-end gap-2 mt-4">
              <Button
                variant="outline"
                onClick={() => {
                  setShowQuickCategoryModal(false);
                  setQuickEditId(null);
                }}
              >
                إلغاء
              </Button>
              <Button onClick={saveQuickCategoryEdit}>حفظ</Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      
      {/* نافذة التعديل السريع لمستوى الصعوبة */}
      <Dialog open={showQuickDifficultyModal} onOpenChange={setShowQuickDifficultyModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>تغيير مستوى الصعوبة</DialogTitle>
          </DialogHeader>
          <div className="p-4">
            <div className="space-y-4">
              <div className="flex flex-col gap-3">
                <label className="mb-2 block">مستوى الصعوبة</label>
                <div className="flex flex-col gap-3">
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="radio"
                      name="quickDifficulty"
                      value={1}
                      checked={(quickEditValue as number) === 1}
                      onChange={() => setQuickEditValue(1)}
                      className="h-4 w-4"
                    />
                    <span>سهل</span>
                  </label>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="radio"
                      name="quickDifficulty"
                      value={2}
                      checked={(quickEditValue as number) === 2}
                      onChange={() => setQuickEditValue(2)}
                      className="h-4 w-4"
                    />
                    <span>متوسط</span>
                  </label>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="radio"
                      name="quickDifficulty"
                      value={3}
                      checked={(quickEditValue as number) === 3}
                      onChange={() => setQuickEditValue(3)}
                      className="h-4 w-4"
                    />
                    <span>صعب</span>
                  </label>
                </div>
              </div>
            </div>
            <div className="flex justify-end gap-2 mt-4">
              <Button
                variant="outline"
                onClick={() => {
                  setShowQuickDifficultyModal(false);
                  setQuickEditId(null);
                  setQuickEditValue(null);
                }}
              >
                إلغاء
              </Button>
              <Button onClick={saveQuickDifficultyEdit}>حفظ</Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}