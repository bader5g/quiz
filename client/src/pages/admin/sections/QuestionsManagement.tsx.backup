import React, { useState, useEffect } from "react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient"; // تأكد من أن هذا هو المسار الصحيح
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Loader2, Plus } from "lucide-react";
import {
  Form as FormComponent,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"; // تأكد من استيراد Form بشكل صحيح

// مخطط التحقق من السؤال
const questionSchema = z.object({
  id: z.number().optional(),
  text: z.string().min(3, "نص السؤال يجب أن يحتوي على 3 أحرف على الأقل"),
  answer: z.string().min(1, "الإجابة مطلوبة"),
  categoryId: z.number().min(1, "يجب اختيار فئة"),
  subcategoryId: z.number().min(1, "يجب اختيار فئة فرعية"),
  difficulty: z.number().min(1).max(3),
  imageUrl: z.string().optional().nullable(),
  isActive: z.boolean().default(true),
  tags: z.string().optional(),
});

type Question = z.infer<typeof questionSchema>;

interface Category {
  id: number;
  name: string;
  icon: string;
  children: {
    id: number;
    name: string;
    icon: string;
    availableQuestions: number;
  }[];
}

interface QuestionDisplay extends Question {
  categoryName: string;
  subcategoryName: string;
  categoryIcon: string;
  usageCount: number;
  createdAt: string;
}

export default function QuestionsManagement() {
  const { toast } = useToast();
  const [loading, setLoading] = useState(true);
  const [questions, setQuestions] = useState<QuestionDisplay[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [saving, setSaving] = useState(false);

  // نموذج السؤال
  const form = useForm<Question>({
    resolver: zodResolver(questionSchema),
    defaultValues: {
      text: "",
      answer: "",
      categoryId: undefined,
      subcategoryId: undefined,
      difficulty: 1,
      imageUrl: "",
      isActive: true,
      tags: "",
    },
  });

  // جلب الفئات من API
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await apiRequest("GET", "/categories"); // تأكد من أن هذا هو المسار الصحيح لجلب الفئات
        if (!response.ok) {
          throw new Error("فشل في جلب الفئات");
        }
        const data = await response.json();
        console.log("الفئات المستلمة:", data); // تحقق من البيانات
        setCategories(data);
      } catch (error) {
        console.error("خطأ في جلب الفئات:", error);
        toast({
          variant: "destructive",
          title: "خطأ في جلب الفئات",
          description: "حدث خطأ أثناء محاولة جلب الفئات.",
        });
      } finally {
        setLoading(false);
      }
    };

    fetchCategories();
  }, []);

  const showAddQuestionForm = () => {
    form.reset();
    setIsEditMode(false);
    setDialogOpen(true);
  };

  const onSubmitQuestion = async (values: Question) => {
    try {
      setSaving(true);
      // هنا يمكنك إضافة منطق لحفظ السؤال عبر API
      setQuestions((prev) => [
        ...prev,
        {
          ...values,
          id: prev.length + 1,
          categoryName: findCategoryName(values.categoryId),
          subcategoryName: findSubcategoryName(
            values.categoryId,
            values.subcategoryId,
          ),
          categoryIcon: findCategoryIcon(values.categoryId),
          usageCount: 0,
          createdAt: new Date().toISOString(),
        },
      ]);
      toast({
        title: "تمت الإضافة بنجاح",
        description: "تم إضافة السؤال بنجاح",
      });
      setDialogOpen(false);
    } catch (error) {
      console.error(error);
      toast({
        variant: "destructive",
        title: "خطأ في الحفظ",
        description: "حدث خطأ أثناء محاولة حفظ السؤال",
      });
    } finally {
      setSaving(false);
    }
  };

  const findCategoryName = (categoryId?: number): string => {
    const category = categories.find((c) => c.id === categoryId);
    return category ? category.name : "غير معروف";
  };

  const findSubcategoryName = (
    categoryId?: number,
    subcategoryId?: number,
  ): string => {
    const category = categories.find((c) => c.id === categoryId);
    if (!category) return "غير معروف";
    const subcategory = category.children.find((s) => s.id === subcategoryId);
    return subcategory ? subcategory.name : "غير معروف";
  };

  const findCategoryIcon = (categoryId?: number): string => {
    const category = categories.find((c) => c.id === categoryId);
    return category ? category.icon : "❓";
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <span className="mr-2">جاري تحميل الفئات...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-medium">إدارة الأسئلة</h3>
          <p className="text-sm text-muted-foreground">
            إضافة وتعديل وإدارة أسئلة اللعبة
          </p>
        </div>
        <Button onClick={showAddQuestionForm}>
          <Plus className="h-4 w-4 ml-2" />
          إضافة سؤال جديد
        </Button>
      </div>

      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent
          className="max-w-sm w-full p-0 rounded-2xl shadow-lg border-0 animate-slideInUp"
          style={{ overflow: "visible" }}
        >
          <DialogHeader>
            <DialogTitle className="text-base">
              {isEditMode ? "تعديل السؤال" : "إضافة سؤال جديد"}
            </DialogTitle>
            <DialogDescription className="text-xs mt-1">
              {isEditMode
                ? 'قم بتعديل بيانات السؤال ثم انقر "حفظ التعديلات"'
                : 'يرجى إدخال بيانات السؤال الجديد كاملة ثم اضغط "إضافة السؤال"'}
            </DialogDescription>
          </DialogHeader>

          <div className="px-4 py-2 max-h-[55vh] overflow-y-auto">
            <FormComponent {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmitQuestion)}
                className="space-y-3"
                id="question-form"
              >
                <FormField
                  control={form.control}
                  name="text"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>نص السؤال</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="اكتب نص السؤال هنا"
                          className="resize-none min-h-[60px] text-sm"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="answer"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>الإجابة الصحيحة</FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          placeholder="الإجابة الصحيحة"
                          className="text-sm"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="flex gap-2">
                  <FormField
                    control={form.control}
                    name="categoryId"
                    render={({ field }) => (
                      <FormItem className="flex-1">
                        <FormLabel>الفئة</FormLabel>
                        <Select
                          onValueChange={(value) => {
                            const catId =
                              value === "none" ? undefined : parseInt(value);
                            field.onChange(catId);
                            form.setValue("subcategoryId", undefined); // Reset subcategory when category changes
                          }}
                          value={field.value ? field.value.toString() : "none"}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="اختر فئة" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="none">اختر فئة</SelectItem>
                            {categories.map((category) => (
                              <SelectItem
                                key={category.id}
                                value={category.id.toString()}
                              >
                                {category.icon} {category.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="subcategoryId"
                    render={({ field }) => (
                      <FormItem className="flex-1">
                        <FormLabel>الفئة الفرعية</FormLabel>
                        <Select
                          disabled={!form.getValues("categoryId")}
                          onValueChange={(value) => {
                            field.onChange(
                              value === "none" ? undefined : parseInt(value),
                            );
                          }}
                          value={field.value ? field.value.toString() : "none"}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="اختر الفئة الفرعية" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="none">
                              اختر الفئة الفرعية
                            </SelectItem>
                            {(() => {
                              const selectedCat = categories.find(
                                (c) => c.id === form.getValues("categoryId"),
                              );
                              return selectedCat &&
                                selectedCat.children.length > 0 ? (
                                selectedCat.children.map((subcat) => (
                                  <SelectItem
                                    key={subcat.id}
                                    value={subcat.id.toString()}
                                  >
                                    {subcat.icon} {subcat.name}
                                  </SelectItem>
                                ))
                              ) : (
                                <SelectItem value="0" disabled>
                                  لا توجد فئات فرعية
                                </SelectItem>
                              );
                            })()}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <FormField
                  control={form.control}
                  name="difficulty"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>الصعوبة</FormLabel>
                      <Select
                        value={field.value ? field.value.toString() : "1"}
                        onValueChange={(value) =>
                          field.onChange(parseInt(value))
                        }
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="اختر" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="1">سهل</SelectItem>
                          <SelectItem value="2">متوسط</SelectItem>
                          <SelectItem value="3">صعب</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="flex gap-2">
                  <FormField
                    control={form.control}
                    name="imageUrl"
                    render={({ field }) => (
                      <FormItem className="flex-1">
                        <FormLabel>رابط الصورة (اختياري)</FormLabel>
                        <FormControl>
                          <Input
                            {...field}
                            placeholder="رابط الصورة"
                            className="text-xs"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {form.watch("imageUrl") && (
                    <div className="self-end">
                      <img
                        src={form.watch("imageUrl")}
                        alt="معاينة"
                        className="h-10 w-10 object-contain border rounded"
                        onError={(e) => (e.currentTarget.src = "")}
                      />
                    </div>
                  )}
                </div>

                <FormField
                  control={form.control}
                  name="tags"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>الكلمات المفتاحية</FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          placeholder="مثال: رياضيات,علوم"
                          className="text-xs"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="isActive"
                  render={({ field }) => (
                    <FormItem className="flex items-center gap-2">
                      <FormControl>
                        <Checkbox
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                      <FormLabel className="mb-0">مفعل</FormLabel>
                    </FormItem>
                  )}
                />
              </form>
            </FormComponent>
          </div>

          <div className="flex justify-between gap-2 px-4 py-3 border-t bg-white rounded-b-2xl">
            <Button
              type="button"
              variant="outline"
              onClick={() => setDialogOpen(false)}
              className="w-24"
              disabled={saving}
            >
              إلغاء
            </Button>
            <Button
              type="submit"
              form="question-form"
              className="w-28"
              disabled={saving}
            >
              {saving ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  جاري الحفظ...
                </>
              ) : isEditMode ? (
                "حفظ التعديلات"
              ) : (
                "إضافة السؤال"
              )}
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
